// 3. Using the HttpServlet Class (For HTTP-specific servlets).
/**
 * This example shows a Servlet extending the abstract class `HttpServlet`.
 * It handles HTTP requests by overriding the doGet() and doPost() methods.
 * - doGet() processes GET requests.
 * - doPost() processes POST requests.
 * 
 * In this example, the doGet() method generates an HTML response based on the 
 * client's request, while doPost() can be used for handling form submissions 
 * or other POST requests.
 */

import java.io.IOException;
import jakarta.servlet.ServletException;
import java.io.PrintWriter;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;

public class HttpServletExample extends HttpServlet {

    protected void processRequest(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        try {
            System.out.println("Service has started: Handling requests...");
            PrintWriter writer = response.getWriter();
            writer.println("<h1>Welcome to My HTTP Servlet!</h1>");
            writer.print("<p>This response is dynamically generated by the HTTP servlet, confirming that your request has been processed successfully.</p>");
        } catch (IOException e) {
            System.out.println("An error occurred while processing the request: " + e.getMessage());
        }
    }

    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        processRequest(request, response);
    }

    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        processRequest(request, response);
    }
}
